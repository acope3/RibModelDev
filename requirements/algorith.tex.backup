\documentclass[11pt]{article}
\usepackage{setspace}
\usepackage[margin=1in]{geometry}

\usepackage{listings}
\lstset{language=C++} 
%\usepackage[sort&compress]{natbib}
\begin{document}
  \title{Mixture MCMC Algorithm (SEMPPR ROC)}
  \date{\today}
  \maketitle
  
  \section{Draw conditional $\phi$ values and $p$ values}
  
  \begin{lstlisting}[frame=single]
    double logLikelihood = 0.0;
    int numGenes = genome.getGenomeSize();
    unsigned numMixtures = parameter.getNumMixtureElements();
    
    double dirichletParameters[numMixtures];
    for(int i = 0; i < numGenes; i++)
    {
        Gene gene = genome.getGene(i);
        double currLike = 0.0;
        double propLike = 0.0;

        double probabilities[numMixtures];
        for(unsigned k = 0; k < numMixtures; k++)
        {
            double* logLikes = 
	      model.calculateLogLiklihoodRatioPerGene(gene, 
		i, parameter, k);
            probabilities[k] = 
	      parameter.getCategoryProbability(k, iteration) * 
	      std::exp(cur.logLikes);
            currLike += probabilities[k];
            propLike += parameter.getCategoryProbability(k, iteration) * 
	      std::exp(prop.logLikes);
        }

        // Get category in which the gene is placed in.
        // If we use multiple sequence observations randMultinom 
        // needs an parameter N to place N observations in 
        // numMixture buckets
        categoryOfGene = ROCParameter::randMultinom(probabilities, 
	  numMixtures);


        // accept/reject proposed phi values
        double r = Unif(0,1)
        if( r < (propLike / currLike) )
        {
            // moves proposed phi to current phi
            parameter.updateExpression(i);
            logLikelihood += propLike;
        }else{
            logLikelihood += currLike;
        }
        if((iteration % thining) == 0)
        {
	    for(unsigned k = 0u; k < numMixtures; k++)
	    {
	      parameter.updateExpressionTrace(iteration/thining, i, k);
	    }
        }
    }
    // draw new mixture probabilities
    double newMixtureProbabilities[numMixtures];
    ROCParameter::randDirichlet(dirichletParameters, numMixtures, 
      newMixtureProbabilities);

    for(unsigned k = 0u; k < numMixtures; k++)
    {
	parameter.setCategoryProbability(k, i, 
	  newMixtureProbabilities[k]);
    }
  \end{lstlisting}

  \section{Draw conditional codon specific parameter values}
   \begin{lstlisting}[frame=single]
    unsigned numMixtures = parameter.getNumMixtureElements();
    
    logAcceptanceRatioPerMixture[22];
    
    // for all amino acids (incl. STOP and Ser2) 
    // but skip one codon AA and STOP
    for(unsigned aa = 0; aa < 22; i++)
    {
      for(int i = 0; i < numGenes; i++)
      {
	// which mixture element does the gene belong to
	unsigned mixtureElement = parameter.getMixtureOfGene(i);
	
	// how is the mixture element defined
	unsigned mutationCategory = 
	  parameter.getMutationCategory(mixtureElement);
	unsigned selectionCategory = 
	  parameter.getSelectionCategory(mixtureElement);
	unsigned expressionCategory = 
	  parameter.getExpressionCategory(mixtureElement);
	
	// get parameter values for mixture element
	double phiValue = 
	  parameter.getExpression(geneIndex, expressionCategory, false);
        double mutation[numCodons - 1];
        parameter.getParameterForCategory(mutationCategory, 
	  ROCParameter::dM, curAA, false, mutation);
        double selection[numCodons - 1];
        parameter.getParameterForCategory(selectionCategory, 
	  ROCParameter::dEta, curAA, false, selection);
        
        // get proposed values for mixture element
        double mutation_proposed[numCodons - 1];
        parameter.getParameterForCategory(mutationCategory, 
	  ROCParameter::dM, curAA, true, mutation_proposed);
        double selection_proposed[numCodons - 1];
        parameter.getParameterForCategory(selectionCategory, 
	  ROCParameter::dEta, curAA, true, selection_proposed);        
	
	int codonCount[numCodons];
        obtainCodonCount(seqsum, curAA, codonCount);
	
        logLikelihood += calculateLogLikelihoodPerAAPerGene(numCodons, 
	  codonCount, seqsum, mutation, selection, phiValue);
        logLikelihood_proposed += 
	  calculateLogLikelihoodPerAAPerGene(numCodons, 
	  codonCount, seqsum, mutation_proposed, selection_proposed, 
	  phiValue);
      }
      logAcceptanceRatioPerMixture[aa] = logLikelihood_proposed - 
	logLikelihood;          
    }

    
   \end{lstlisting}
 
  
  
  
\end{document}