\documentclass[11pt]{article}
\usepackage{setspace}
\usepackage[margin=1in]{geometry}

%\usepackage[sort&compress]{natbib}
\begin{document}
  \title{Requirements for the ribosome modeling software framework}
  \author{Cedric Landerer} % Your name
  \date{\today}
  \maketitle
 

  \section{Input}
  \begin{enumerate}
   \item Sequence (coding sequence only)
   \item initial expression level per gene
   \item observed expression level (optional)
  \end{enumerate}
  
  \section{Output}
  \begin{enumerate}
   \item relative mutation bias per codon
   \item relative selection bias per codon
   \item estimated expression level per gene
  \end{enumerate}
 
  \section{General software description and requirements}
  The software framework has to be able to perform a MCMC based algorithm on a model of choice using coding sequences and expression level as input.
  The framework will perform a random walk on the defined parameter space by likelihood comparison. 
  
  The MCMC class has to provide functions to compare likelihood values and decide the acceptance of a proposed parameter value.
  The Parameter class is responsible for tracing the values and storing accepted values.
  The Model class performs the likelihood calculation.
  
  
  An R interface will be provided to access the framework written in C++ (using the C++ 11 standard).
  
  \subsection{Requirements}
  The software has to be modular, with a consistent interface (specified in section XX) to allow for the exchange of modules.
  The software must provide the ability to perform heavy tasks in parallel (openmp vs. thread).
  
  \section{Targeted User base}
  We target users with a background in computational biology, capable of programming basic R scripts. A strong computational 
  environment is assumed to perform tasks with a high computational load.
  
  \section{Modularity}
  \begin{enumerate}
   \item Classes do only perform operations on their own data.
   \item Objects do not modify other objects and instances.
   \item Objects should not expose member variables but instead use getter and setter functions
  \end{enumerate}

  \section{Interface}
  \subsection{R to C++}
  The R interface to access will be provided by usage of the R package Rcpp. 
  To expose whole classes it is required that RCPP\_MODULES are provided for each C++ class exposed to R
  
  \subsection{Between C++ classes}
  
  
  \section{Code}
  \begin{enumerate}
    \item line break is required before every new code-block \{
    \item code blocks will begin in a new line
    \item one whitespace is required between operator and variable
    \item variables marking a pointer have to start with a lowercase p
    \item large data structures should be passed by reference
    \item code must not be written twice -> convert to function for reuse
    \item C++ style array use is preferred over C style array use
    \item Each class is written in one header file (.h for function and class definitions) and one code file (.cpp for function implementation).
  \end{enumerate}

  \subsection{Example Code Block}
  The following code block illustrates the C++ style use of arrays and the specified line break before \{.
  \begin{verbatim}
      for(unsigned i = start; i < traceLength; i++)
      {
	  posteriorMean += expressionTrace[i][geneIndex];
      } 
  \end{verbatim}
  The following code example shows a function definition where the variables \textit{genome} and \textit{parameter} are passed as references
  \begin{verbatim}
    double ROCModel::calculateLikelihoodPerAA(char aa, Genome& genome, 
		ROCParameter& parameter, bool pdM, bool pdEta)   
  \end{verbatim}


 
 
\end{document}
