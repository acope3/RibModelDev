rm(list=ls())
library(ribModel)
#read genome
with.phi <- FALSE
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
genome$getGroupList()
sphi <- (c(1,1,1))
numMixtures <- 3
mixDef <- "allUnique"
geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457), rep(1, 3403), rep(3, 500))
## defaults from initializeParameterObject
expressionValues = NULL
model = "ROC"
split.serine = TRUE
mixture.definition = "allUnique"
mixture.definition.matrix = NULL
restart.file = NULL
mutation_prior_sd = 0.35
if(is.null(restart.file)){
if(length(sphi) != numMixtures){
stop("Not all mixtures have an Sphi value assigned!\n")
}
if(length(genome) != length(geneAssignment)){
stop("Not all Genes have a mixture assignment!\n")
}
if(max(geneAssignment) > numMixtures){
stop("Gene is assigned to non existing mixture!\n")
}
#TODO: should we check integraty of other values, such as numMixtures being
#positive?
}
#end initializeParameterObject
if(is.null(mixture.definition.matrix)){
# keyword constructor
parameter <- new(ROCParameter, as.vector(sphi), numMixtures, geneAssignment,
split.serine, mixture.definition)
}else{
#matrix constructor
mixture.definition <- c(mixture.definition.matrix[, 1],
mixture.definition.matrix[, 2])
parameter <- new(ROCParameter, as.vector(sphi), numMixtures, geneAssignment,
mixture.definition, split.serine)
}
# initialize expression values
if(is.null(expressionValues)){
parameter$initializeSynthesisRateByGenome(genome, mean(sphi))
}else{
parameter$initializeSynthesisRateByList(expressionValues)
}
parameter$mutation_prior_sd <- (mutation_prior_sd)
# end initializeROCObject
numMutationCategory <- parameter$numMutationCategories
numSelectionCategory <- parameter$numSelectionCategories
phi <- parameter$getCurrentSynthesisRateForMixture(1) # phi values are all the same initially
#ct <- getInstance()
#names.aa <- ct$getGroupList()
names.aa <- genome$getGroupList()
codonCounts <- getCodonCountsForAA(aa, genome)
numCodons <- dim(codonCounts)[2] - 1
names.aa <- genome$getGroupList()
codonCounts <- getCodonCountsForAA(aa, genome)
aa <- "A"
codons <- AAToCodon(aa, F)
rm(list=ls())
library(ribModel)
#read genome
with.phi <- FALSE
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
sphi <- (c(1,1,1))
numMixtures <- 3
mixDef <- "allUnique"
geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457), rep(1, 3403), rep(3, 500))
## defaults from initializeParameterObject
expressionValues = NULL
model = "ROC"
split.serine = TRUE
mixture.definition = "allUnique"
mixture.definition.matrix = NULL
restart.file = NULL
mutation_prior_sd = 0.35
if(is.null(restart.file)){
if(length(sphi) != numMixtures){
stop("Not all mixtures have an Sphi value assigned!\n")
}
if(length(genome) != length(geneAssignment)){
stop("Not all Genes have a mixture assignment!\n")
}
if(max(geneAssignment) > numMixtures){
stop("Gene is assigned to non existing mixture!\n")
}
#TODO: should we check integraty of other values, such as numMixtures being
#positive?
}
#end initializeParameterObject
if(is.null(mixture.definition.matrix)){
# keyword constructor
parameter <- new(ROCParameter, as.vector(sphi), numMixtures, geneAssignment,
split.serine, mixture.definition)
}else{
#matrix constructor
mixture.definition <- c(mixture.definition.matrix[, 1],
mixture.definition.matrix[, 2])
parameter <- new(ROCParameter, as.vector(sphi), numMixtures, geneAssignment,
mixture.definition, split.serine)
}
# initialize expression values
if(is.null(expressionValues)){
parameter$initializeSynthesisRateByGenome(genome, mean(sphi))
}else{
parameter$initializeSynthesisRateByList(expressionValues)
}
parameter$mutation_prior_sd <- (mutation_prior_sd)
# end initializeROCObject
numMutationCategory <- parameter$numMutationCategories
numSelectionCategory <- parameter$numSelectionCategories
phi <- parameter$getCurrentSynthesisRateForMixture(1) # phi values are all the same initially
#ct <- getInstance()
#names.aa <- ct$getGroupList()
names.aa <- genome$getGroupList()
codonCounts <- getCodonCountsForAA(aa, genome)
codons <- genome$AAToCodon(aa, F)
aa ="A"
codons <- genome$AAToCodon(aa, F)
codonCounts <- lapply(codons, function(codon){
codonCounts <- genome$getCodonCountsPerGene(codon)
})
codonCounts <- do.call("cbind", codonCounts)
return(codonCounts)
source('~/Desktop/RibModelFramework/R/parameterObject.R', echo=TRUE)
codonCounts <- getCodonCountsForAA(aa, genome)
rm(list=ls())
library(ribModel)
#read genome
with.phi <- FALSE
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
sphi <- (c(1,1,1))
numMixtures <- 3
mixDef <- "allUnique"
geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457), rep(1, 3403), rep(3, 500))
## defaults from initializeParameterObject
expressionValues = NULL
model = "ROC"
split.serine = TRUE
mixture.definition = "allUnique"
mixture.definition.matrix = NULL
restart.file = NULL
mutation_prior_sd = 0.35
if(is.null(restart.file)){
if(length(sphi) != numMixtures){
stop("Not all mixtures have an Sphi value assigned!\n")
}
if(length(genome) != length(geneAssignment)){
stop("Not all Genes have a mixture assignment!\n")
}
if(max(geneAssignment) > numMixtures){
stop("Gene is assigned to non existing mixture!\n")
}
#TODO: should we check integraty of other values, such as numMixtures being
#positive?
}
#end initializeParameterObject
if(is.null(mixture.definition.matrix)){
# keyword constructor
parameter <- new(ROCParameter, as.vector(sphi), numMixtures, geneAssignment,
split.serine, mixture.definition)
}else{
#matrix constructor
mixture.definition <- c(mixture.definition.matrix[, 1],
mixture.definition.matrix[, 2])
parameter <- new(ROCParameter, as.vector(sphi), numMixtures, geneAssignment,
mixture.definition, split.serine)
}
# initialize expression values
if(is.null(expressionValues)){
parameter$initializeSynthesisRateByGenome(genome, mean(sphi))
}else{
parameter$initializeSynthesisRateByList(expressionValues)
}
parameter$mutation_prior_sd <- (mutation_prior_sd)
# end initializeROCObject
numMutationCategory <- parameter$numMutationCategories
numSelectionCategory <- parameter$numSelectionCategories
phi <- parameter$getCurrentSynthesisRateForMixture(1) # phi values are all the same initially
#ct <- getInstance()
#names.aa <- ct$getGroupList()
names.aa <- genome$getGroupList()
codonCounts <- getCodonCountsForAA(aa, genome)
aa <- "A"
codonCounts <- getCodonCountsForAA(aa, genome)
numCodons <- dim(codonCounts)[2] - 1
covmat <- vector("list", numMixtures)
mixElement <- 1
idx <- geneAssignment == mixElement
csp <- getCSPbyLogit(codonCounts[idx, ], phi[idx])
csp
csp$coef.mat[1,]
parameter$initMutation(csp$coef.mat[1,], mixElement, aa)
parameter$initSelection(csp$coef.mat[2,], mixElement, aa)
for(mixElement in 1:numMixtures){
idx <- geneAssignment == mixElement
csp <- getCSPbyLogit(codonCounts[idx, ], phi[idx])
parameter$initMutation(csp$coef.mat[1,], mixElement, aa)
parameter$initSelection(csp$coef.mat[2,], mixElement, aa)
}
library(ribModel)
rm(list=ls())
#read genome
with.phi <- FALSE
if (with.phi) {
genome <- initializeGenomeObject(file = "../data/twoMixtures/simulatedAllUniqueR.fasta", expression.file = "../data/twoMixtures/simulatedAllUniqueR_phi.csv")
} else {
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
}
#initialize parameter object
sphi_init <- (c(1,1,1))
numMixtures <- 3
mixDef <- "allUnique"
geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457), rep(1, 3403), rep(3, 500))
#geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457))
#geneAssignment <- c(rep(1,448), rep(2,457))
#geneAssignment <- c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
samples <- 10
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "ROC", with.phi)
setRestartSettings(mcmc, "restartFile.rst", adaptiveWidth, TRUE)
#run mcmc on genome with parameter using model
system.time(
runMCMC(mcmc, genome, model, 8)
)
library(ribModel)
rm(list=ls())
#read genome
with.phi <- FALSE
if (with.phi) {
genome <- initializeGenomeObject(file = "../data/twoMixtures/simulatedAllUniqueR.fasta", expression.file = "../data/twoMixtures/simulatedAllUniqueR_phi.csv")
} else {
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
}
#initialize parameter object
sphi_init <- (c(1,1,1))
numMixtures <- 3
mixDef <- "allUnique"
geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457), rep(1, 3403), rep(3, 500))
#geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457))
#geneAssignment <- c(rep(1,448), rep(2,457))
#geneAssignment <- c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
samples <- 10
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "ROC", with.phi)
setRestartSettings(mcmc, "restartFile.rst", adaptiveWidth, TRUE)
#run mcmc on genome with parameter using model
system.time(
runMCMC(mcmc, genome, model, 8)
)
library(ribModel)
with.phi <- FALSE
if (with.phi) {
genome <- initializeGenomeObject(file = "../data/twoMixtures/simulatedAllUniqueR.fasta", expression.file = "../data/twoMixtures/simulatedAllUniqueR_phi.csv")
} else {
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
}
source('~/Desktop/RibModelFramework/R/genomeObject.R', echo=TRUE)
if (with.phi) {
genome <- initializeGenomeObject(file = "../data/twoMixtures/simulatedAllUniqueR.fasta", expression.file = "../data/twoMixtures/simulatedAllUniqueR_phi.csv")
} else {
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
}
#initialize parameter object
sphi_init <- (c(1,1,1))
numMixtures <- 3
mixDef <- "allUnique"
geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457), rep(1, 3403), rep(3, 500))
#geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457))
#geneAssignment <- c(rep(1,448), rep(2,457))
#geneAssignment <- c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
#parameter <- initializeParameterObject(model="ROC", restart.file="10restartFile.rst")
# initialize MCMC object
samples <- 10
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "ROC", with.phi)
setRestartSettings(mcmc, "restartFile.rst", adaptiveWidth, TRUE)
#run mcmc on genome with parameter using model
system.time(
runMCMC(mcmc, genome, model, 8)
)
library(ribModel)
rm(list=ls())
#read genome
with.phi <- FALSE
if (with.phi) {
genome <- initializeGenomeObject(file = "../data/twoMixtures/simulatedAllUniqueR.fasta", expression.file = "../data/twoMixtures/simulatedAllUniqueR_phi.csv")
} else {
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
}
#initialize parameter object
sphi_init <- (c(1,1,1))
numMixtures <- 3
mixDef <- "allUnique"
geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457), rep(1, 3403), rep(3, 500))
#geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457))
#geneAssignment <- c(rep(1,448), rep(2,457))
#geneAssignment <- c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
#parameter <- initializeParameterObject(model="ROC", restart.file="10restartFile.rst")
# initialize MCMC object
samples <- 10
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "ROC", with.phi)
setRestartSettings(mcmc, "restartFile.rst", adaptiveWidth, TRUE)
#run mcmc on genome with parameter using model
system.time(
runMCMC(mcmc, genome, model, 8)
)
library(ribModel)
rm(list=ls())
#read genome
with.phi <- FALSE
if (with.phi) {
genome <- initializeGenomeObject(file = "../data/twoMixtures/simulatedAllUniqueR.fasta", expression.file = "../data/twoMixtures/simulatedAllUniqueR_phi.csv")
} else {
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
}
source('~/Desktop/RibModelFramework/R/genomeObject.R', echo=TRUE)
if (with.phi) {
genome <- initializeGenomeObject(file = "../data/twoMixtures/simulatedAllUniqueR.fasta", expression.file = "../data/twoMixtures/simulatedAllUniqueR_phi.csv")
} else {
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
}
#initialize parameter object
sphi_init <- (c(1,1,1))
numMixtures <- 3
mixDef <- "allUnique"
geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457), rep(1, 3403), rep(3, 500))
#geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457))
#geneAssignment <- c(rep(1,448), rep(2,457))
#geneAssignment <- c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
#parameter <- initializeParameterObject(model="ROC", restart.file="10restartFile.rst")
# initialize MCMC object
samples <- 10
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "ROC", with.phi)
setRestartSettings(mcmc, "restartFile.rst", adaptiveWidth, TRUE)
#run mcmc on genome with parameter using model
system.time(
runMCMC(mcmc, genome, model, 8)
)
-2613341 - -2373588
#initialize parameter object
sphi_init <- (c(1,1,1))
numMixtures <- 3
mixDef <- "allUnique"
geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457), rep(1, 3403), rep(3, 500))
#geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457))
#geneAssignment <- c(rep(1,448), rep(2,457))
#geneAssignment <- c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
#parameter <- initializeParameterObject(model="ROC", restart.file="10restartFile.rst")
# initialize MCMC object
samples <- 10
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "ROC", with.phi)
setRestartSettings(mcmc, "restartFile.rst", adaptiveWidth, TRUE)
#run mcmc on genome with parameter using model
system.time(
runMCMC(mcmc, genome, model, 8)
)
rm(list=ls())
library(ribModel)
p <- new(ROCParameter)
parameter <- loadParameterObject(c("ROCParameter.Rdat"))
trace <- parameter$getTraceObject()
plot(trace, what = "MixtureProbability")
rm(list=ls())
library(ribModel)
parameter <- loadParameterObject(c("ROCParameter.Rdat"))
trace <- parameter$getTraceObject()
plot(trace, what = "MixtureProbability")
rm(list=ls())
library(ribModel)
parameter <- loadParameterObject(c("ROCParameter.Rdat"))
trace <- parameter$getTraceObject()
plot(trace, what = "MixtureProbability")
plot(trace, what = "SPhi")
plot(trace, what = "sPhi")
plot(trace, what = "Sphi")
rm(list=ls())
library(ribModel)
genome <- initializeGenomeObject(file =
"../data/rfp/rfp.counts.by.codon.and.gene.GSE63789.wt.csv", FALSE)
sphi_init <- c(2)
numMixtures <- 1
mixDef <- "allUnique"
geneAssignment <- c(rep(1, genome$getGenomeSize()))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, model= "RFP", split.serine = TRUE, mixture.definition = mixDef)
#parameter <- initializeParameterObject(model="RFP", restart.file="30restartFile.rst")
samples <- 40
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
model <- initializeModelObject(parameter, "RFP")
setRestartSettings(mcmc, "restartFile.rst", 10, TRUE)
system.time(
runMCMC(mcmc, genome, model, 8)
)
rm(list=ls())
library(ribModel)
genome <- initializeGenomeObject(file =
"../data/rfp/rfp.counts.by.codon.and.gene.GSE63789.wt.csv", FALSE)
sphi_init <- c(2)
numMixtures <- 1
mixDef <- "allUnique"
geneAssignment <- c(rep(1, genome$getGenomeSize()))
geneAssignment <- c(rep(1, genome$getGenomeSize(F)))
geneAssignment
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, model= "RFP", split.serine = TRUE, mixture.definition = mixDef)
samples <- 40
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
model <- initializeModelObject(parameter, "RFP")
setRestartSettings(mcmc, "restartFile.rst", 10, TRUE)
system.time(
runMCMC(mcmc, genome, model, 8)
)
trace <- parameter$getTraceObject()
cat <- 1
proposal <- FALSE
alphaList <- numeric (61)
lambdaPrimeList <- numeric (61)
waitingTimes <- numeric(61)
alpha.ci <- matrix(0, ncol=2, nrow=61)
lambdaPrime.ci <- matrix(0, ncol=2, nrow=61)
phiList <- numeric(genome$getGenomeSize())
ids <- numeric(genome$getGenomeSize())
codonList <- codons()
for (i in 1:61)
{
codon <- codonList[i]
alphaList[i] <- parameter$getCodonSpecificPosteriorMean(cat, samples * 0.5, codon, 0)
cat <- 1
proposal <- FALSE
alphaList <- numeric (61)
lambdaPrimeList <- numeric (61)
waitingTimes <- numeric(61)
alpha.ci <- matrix(0, ncol=2, nrow=61)
lambdaPrime.ci <- matrix(0, ncol=2, nrow=61)
phiList <- numeric(genome$getGenomeSize(F))
ids <- numeric(genome$getGenomeSize(F))
codonList <- codons()
}
cat <- 1
proposal <- FALSE
alphaList <- numeric (61)
lambdaPrimeList <- numeric (61)
waitingTimes <- numeric(61)
alpha.ci <- matrix(0, ncol=2, nrow=61)
lambdaPrime.ci <- matrix(0, ncol=2, nrow=61)
phiList <- numeric(genome$getGenomeSize(F))
ids <- numeric(genome$getGenomeSize(F))
codonList <- codons()
for (i in 1:61)
{
codon <- codonList[i]
alphaList[i] <- parameter$getCodonSpecificPosteriorMean(cat, samples * 0.5, codon, 0)
alphaTrace <- trace$getCodonSpecificParameterTraceByMixtureElementForCodon(1, codon, 0)
alpha.ci[i,] <- quantile(alphaTrace[(samples * 0.5):samples], probs = c(0.025,0.975))
lambdaPrimeList[i] <- parameter$getCodonSpecificPosteriorMean(cat, samples * 0.5, codon, 1)
lambdaPrimeTrace <- trace$getCodonSpecificParameterTraceByMixtureElementForCodon(1, codon, 1)
lambdaPrime.ci[i,] <- quantile(lambdaPrimeTrace[(samples * 0.5):samples], probs = c(0.025,0.975))
waitingTimes[i] <- alphaList[i] * lambdaPrimeList[i]
}
X <- read.table("../data/rfp/codon.specific.translation.rates.table.csv", header = TRUE, sep =",")
X <- X[order(X[,1]) , ]
XM <- matrix(c(X[,1], X[,2]), ncol = 2, byrow = FALSE)
Y <- data.frame(codonList[-c(62,63,64)], waitingTimes)
colnames(Y) <- c("Codon", "PausingTime")
Y <- Y[order(Y[,1]) , ]
plot(NULL, NULL, xlim=range(XM[,2], na.rm = T), ylim=range(Y[,2]),
main = "Correlation Between Premal and RFP Model Pausing Times", xlab = "True Values", ylab = "Run Values")
upper.panel.plot(XM[,2], Y[,2])
rm(list=ls())
library(ribModel)
