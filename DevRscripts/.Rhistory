expect_equal(codonToIndex("AAC", TRUE), 19)
expect_equal(codonToIndex("CCA", TRUE), 20)
expect_equal(codonToIndex("CCC", TRUE), 21)
expect_equal(codonToIndex("CCG", TRUE), 22)
expect_equal(codonToIndex("CAA", TRUE), 23)
expect_equal(codonToIndex("AGA", TRUE), 24)
expect_equal(codonToIndex("AGG", TRUE), 25)
expect_equal(codonToIndex("CGA", TRUE), 26)
expect_equal(codonToIndex("CGC", TRUE), 27)
expect_equal(codonToIndex("CGG", TRUE), 28)
expect_equal(codonToIndex("TCA", TRUE), 29)
expect_equal(codonToIndex("TCC", TRUE), 30)
expect_equal(codonToIndex("TCG", TRUE), 31)
expect_equal(codonToIndex("ACA", TRUE), 32)
expect_equal(codonToIndex("ACC", TRUE), 33)
expect_equal(codonToIndex("ACG", TRUE), 34)
expect_equal(codonToIndex("GTA", TRUE), 35)
expect_equal(codonToIndex("GTC", TRUE), 36)
expect_equal(codonToIndex("GTG", TRUE), 37)
expect_equal(codonToIndex("TAC", TRUE), 38)
expect_equal(codonToIndex("AGC", TRUE), 39)
})
test_that("Index to AA", {
expect_equal(indexToAA(0),"A")
expect_equal(indexToAA(1),"C")
expect_equal(indexToAA(2),"D")
expect_equal(indexToAA(3),"E")
expect_equal(indexToAA(4),"F")
expect_equal(indexToAA(5),"G")
expect_equal(indexToAA(6),"H")
expect_equal(indexToAA(7),"I")
expect_equal(indexToAA(8),"K")
expect_equal(indexToAA(9),"L")
expect_equal(indexToAA(10),"M")
expect_equal(indexToAA(11),"N")
expect_equal(indexToAA(12),"P")
expect_equal(indexToAA(13),"Q")
expect_equal(indexToAA(14),"R")
expect_equal(indexToAA(15),"S")
expect_equal(indexToAA(16),"T")
expect_equal(indexToAA(17),"V")
expect_equal(indexToAA(18),"W")
expect_equal(indexToAA(19),"Y")
expect_equal(indexToAA(20),"Z")
expect_equal(indexToAA(21),"X")
})
test_that("Codon to AA Index", {
expect_equal(codonToAAIndex("GCA"), 0)
expect_equal(codonToAAIndex("GCC"), 0)
expect_equal(codonToAAIndex("GCG"), 0)
expect_equal(codonToAAIndex("GCT"), 0)
expect_equal(codonToAAIndex("TGC"), 1)
expect_equal(codonToAAIndex("TGT"), 1)
expect_equal(codonToAAIndex("GAC"), 2)
expect_equal(codonToAAIndex("GAT"), 2)
expect_equal(codonToAAIndex("GAA"), 3)
expect_equal(codonToAAIndex("GAG"), 3)
expect_equal(codonToAAIndex("TTC"), 4)
expect_equal(codonToAAIndex("TTT"), 4)
expect_equal(codonToAAIndex("GGA"), 5)
expect_equal(codonToAAIndex("GGC"), 5)
expect_equal(codonToAAIndex("GGG"), 5)
expect_equal(codonToAAIndex("GGT"), 5)
expect_equal(codonToAAIndex("CAC"), 6)
expect_equal(codonToAAIndex("CAT"), 6)
expect_equal(codonToAAIndex("ATA"), 7)
expect_equal(codonToAAIndex("ATC"), 7)
expect_equal(codonToAAIndex("ATT"), 7)
expect_equal(codonToAAIndex("AAA"), 8)
expect_equal(codonToAAIndex("AAG"), 8)
expect_equal(codonToAAIndex("CTA"), 9)
expect_equal(codonToAAIndex("CTC"), 9)
expect_equal(codonToAAIndex("CTG"), 9)
expect_equal(codonToAAIndex("CTT"), 9)
expect_equal(codonToAAIndex("TTA"), 9)
expect_equal(codonToAAIndex("TTG"), 9)
expect_equal(codonToAAIndex("ATG"), 10)
expect_equal(codonToAAIndex("AAC"), 11)
expect_equal(codonToAAIndex("AAT"), 11)
expect_equal(codonToAAIndex("CCA"), 12)
expect_equal(codonToAAIndex("CCC"), 12)
expect_equal(codonToAAIndex("CCG"), 12)
expect_equal(codonToAAIndex("CCT"), 12)
expect_equal(codonToAAIndex("CAA"), 13)
expect_equal(codonToAAIndex("CAG"), 13)
expect_equal(codonToAAIndex("AGA"), 14)
expect_equal(codonToAAIndex("AGG"), 14)
expect_equal(codonToAAIndex("CGA"), 14)
expect_equal(codonToAAIndex("CGC"), 14)
expect_equal(codonToAAIndex("CGG"), 14)
expect_equal(codonToAAIndex("CGT"), 14)
expect_equal(codonToAAIndex("TCA"), 15)
expect_equal(codonToAAIndex("TCC"), 15)
expect_equal(codonToAAIndex("TCG"), 15)
expect_equal(codonToAAIndex("TCT"), 15)
expect_equal(codonToAAIndex("ACA"), 16)
expect_equal(codonToAAIndex("ACC"), 16)
expect_equal(codonToAAIndex("ACG"), 16)
expect_equal(codonToAAIndex("ACT"), 16)
expect_equal(codonToAAIndex("GTA"), 17)
expect_equal(codonToAAIndex("GTC"), 17)
expect_equal(codonToAAIndex("GTG"), 17)
expect_equal(codonToAAIndex("GTT"), 17)
expect_equal(codonToAAIndex("TGG"), 18)
expect_equal(codonToAAIndex("TAC"), 19)
expect_equal(codonToAAIndex("TAT"), 19)
expect_equal(codonToAAIndex("AGC"), 20)
expect_equal(codonToAAIndex("AGT"), 20)
expect_equal(codonToAAIndex("TAA"), 21)
expect_equal(codonToAAIndex("TAG"), 21)
expect_equal(codonToAAIndex("TGA"), 21)
})
test_that("Num Codons for AA", {
expect_equal(getNumCodonsForAA("A", FALSE), 4)
expect_equal(getNumCodonsForAA("C", FALSE), 2)
expect_equal(getNumCodonsForAA("D", FALSE), 2)
expect_equal(getNumCodonsForAA("E", FALSE), 2)
expect_equal(getNumCodonsForAA("F", FALSE), 2)
expect_equal(getNumCodonsForAA("G", FALSE), 4)
expect_equal(getNumCodonsForAA("H", FALSE), 2)
expect_equal(getNumCodonsForAA("I", FALSE), 3)
expect_equal(getNumCodonsForAA("K", FALSE), 2)
expect_equal(getNumCodonsForAA("L", FALSE), 6)
expect_equal(getNumCodonsForAA("M", FALSE), 1)
expect_equal(getNumCodonsForAA("N", FALSE), 2)
expect_equal(getNumCodonsForAA("P", FALSE), 4)
expect_equal(getNumCodonsForAA("Q", FALSE), 2)
expect_equal(getNumCodonsForAA("R", FALSE), 6)
expect_equal(getNumCodonsForAA("S", FALSE), 4)
expect_equal(getNumCodonsForAA("T", FALSE), 4)
expect_equal(getNumCodonsForAA("V", FALSE), 4)
expect_equal(getNumCodonsForAA("W", FALSE), 1)
expect_equal(getNumCodonsForAA("Y", FALSE), 2)
expect_equal(getNumCodonsForAA("Z", FALSE), 2)
expect_equal(getNumCodonsForAA("X", FALSE), 3)
expect_equal(getNumCodonsForAA("A", TRUE), 3)
expect_equal(getNumCodonsForAA("C", TRUE), 1)
expect_equal(getNumCodonsForAA("D", TRUE), 1)
expect_equal(getNumCodonsForAA("E", TRUE), 1)
expect_equal(getNumCodonsForAA("F", TRUE), 1)
expect_equal(getNumCodonsForAA("G", TRUE), 3)
expect_equal(getNumCodonsForAA("H", TRUE), 1)
expect_equal(getNumCodonsForAA("I", TRUE), 1)
expect_equal(getNumCodonsForAA("K", TRUE), 1)
expect_equal(getNumCodonsForAA("L", TRUE), 5)
expect_equal(getNumCodonsForAA("M", TRUE), 0)
expect_equal(getNumCodonsForAA("N", TRUE), 1)
expect_equal(getNumCodonsForAA("P", TRUE), 3)
expect_equal(getNumCodonsForAA("Q", TRUE), 1)
expect_equal(getNumCodonsForAA("R", TRUE), 5)
expect_equal(getNumCodonsForAA("S", TRUE), 3)
expect_equal(getNumCodonsForAA("T", TRUE), 3)
expect_equal(getNumCodonsForAA("V", TRUE), 3)
expect_equal(getNumCodonsForAA("W", TRUE), 0)
expect_equal(getNumCodonsForAA("Y", TRUE), 1)
expect_equal(getNumCodonsForAA("Z", TRUE), 1)
expect_equal(getNumCodonsForAA("X", TRUE), 2)
})
test_that("Num Codons for AA", {
expect_equal(GetNumCodonsForAA("A", FALSE), 4)
expect_equal(GetNumCodonsForAA("C", FALSE), 2)
expect_equal(GetNumCodonsForAA("D", FALSE), 2)
expect_equal(GetNumCodonsForAA("E", FALSE), 2)
expect_equal(GetNumCodonsForAA("F", FALSE), 2)
expect_equal(GetNumCodonsForAA("G", FALSE), 4)
expect_equal(GetNumCodonsForAA("H", FALSE), 2)
expect_equal(GetNumCodonsForAA("I", FALSE), 3)
expect_equal(GetNumCodonsForAA("K", FALSE), 2)
expect_equal(GetNumCodonsForAA("L", FALSE), 6)
expect_equal(GetNumCodonsForAA("M", FALSE), 1)
expect_equal(GetNumCodonsForAA("N", FALSE), 2)
expect_equal(GetNumCodonsForAA("P", FALSE), 4)
expect_equal(GetNumCodonsForAA("Q", FALSE), 2)
expect_equal(GetNumCodonsForAA("R", FALSE), 6)
expect_equal(GetNumCodonsForAA("S", FALSE), 4)
expect_equal(GetNumCodonsForAA("T", FALSE), 4)
expect_equal(GetNumCodonsForAA("V", FALSE), 4)
expect_equal(GetNumCodonsForAA("W", FALSE), 1)
expect_equal(GetNumCodonsForAA("Y", FALSE), 2)
expect_equal(GetNumCodonsForAA("Z", FALSE), 2)
expect_equal(GetNumCodonsForAA("X", FALSE), 3)
expect_equal(GetNumCodonsForAA("A", TRUE), 3)
expect_equal(GetNumCodonsForAA("C", TRUE), 1)
expect_equal(GetNumCodonsForAA("D", TRUE), 1)
expect_equal(GetNumCodonsForAA("E", TRUE), 1)
expect_equal(GetNumCodonsForAA("F", TRUE), 1)
expect_equal(GetNumCodonsForAA("G", TRUE), 3)
expect_equal(GetNumCodonsForAA("H", TRUE), 1)
expect_equal(GetNumCodonsForAA("I", TRUE), 1)
expect_equal(GetNumCodonsForAA("K", TRUE), 1)
expect_equal(GetNumCodonsForAA("L", TRUE), 5)
expect_equal(GetNumCodonsForAA("M", TRUE), 0)
expect_equal(GetNumCodonsForAA("N", TRUE), 1)
expect_equal(GetNumCodonsForAA("P", TRUE), 3)
expect_equal(GetNumCodonsForAA("Q", TRUE), 1)
expect_equal(GetNumCodonsForAA("R", TRUE), 5)
expect_equal(GetNumCodonsForAA("S", TRUE), 3)
expect_equal(GetNumCodonsForAA("T", TRUE), 3)
expect_equal(GetNumCodonsForAA("V", TRUE), 3)
expect_equal(GetNumCodonsForAA("W", TRUE), 0)
expect_equal(GetNumCodonsForAA("Y", TRUE), 1)
expect_equal(GetNumCodonsForAA("Z", TRUE), 1)
expect_equal(GetNumCodonsForAA("X", TRUE), 2)
})
test_that("Num Codons for AA", {
expect_equal(GetNumCodonsForAA("A", FALSE), 4)
expect_equal(GetNumCodonsForAA("C", FALSE), 2)
expect_equal(GetNumCodonsForAA("D", FALSE), 2)
expect_equal(GetNumCodonsForAA("E", FALSE), 2)
expect_equal(GetNumCodonsForAA("F", FALSE), 2)
expect_equal(GetNumCodonsForAA("G", FALSE), 4)
expect_equal(GetNumCodonsForAA("H", FALSE), 2)
expect_equal(GetNumCodonsForAA("I", FALSE), 3)
expect_equal(GetNumCodonsForAA("K", FALSE), 2)
expect_equal(GetNumCodonsForAA("L", FALSE), 6)
expect_equal(GetNumCodonsForAA("M", FALSE), 1)
expect_equal(GetNumCodonsForAA("N", FALSE), 2)
expect_equal(GetNumCodonsForAA("P", FALSE), 4)
expect_equal(GetNumCodonsForAA("Q", FALSE), 2)
expect_equal(GetNumCodonsForAA("R", FALSE), 6)
expect_equal(GetNumCodonsForAA("S", FALSE), 4)
expect_equal(GetNumCodonsForAA("T", FALSE), 4)
expect_equal(GetNumCodonsForAA("V", FALSE), 4)
expect_equal(GetNumCodonsForAA("W", FALSE), 1)
expect_equal(GetNumCodonsForAA("Y", FALSE), 2)
expect_equal(GetNumCodonsForAA("Z", FALSE), 2)
expect_equal(GetNumCodonsForAA("X", FALSE), 3)
expect_equal(GetNumCodonsForAA("A", TRUE), 3)
expect_equal(GetNumCodonsForAA("C", TRUE), 1)
expect_equal(GetNumCodonsForAA("D", TRUE), 1)
expect_equal(GetNumCodonsForAA("E", TRUE), 1)
expect_equal(GetNumCodonsForAA("F", TRUE), 1)
expect_equal(GetNumCodonsForAA("G", TRUE), 3)
expect_equal(GetNumCodonsForAA("H", TRUE), 1)
expect_equal(GetNumCodonsForAA("I", TRUE), 2)
expect_equal(GetNumCodonsForAA("K", TRUE), 1)
expect_equal(GetNumCodonsForAA("L", TRUE), 5)
expect_equal(GetNumCodonsForAA("M", TRUE), 0)
expect_equal(GetNumCodonsForAA("N", TRUE), 1)
expect_equal(GetNumCodonsForAA("P", TRUE), 3)
expect_equal(GetNumCodonsForAA("Q", TRUE), 1)
expect_equal(GetNumCodonsForAA("R", TRUE), 5)
expect_equal(GetNumCodonsForAA("S", TRUE), 3)
expect_equal(GetNumCodonsForAA("T", TRUE), 3)
expect_equal(GetNumCodonsForAA("V", TRUE), 3)
expect_equal(GetNumCodonsForAA("W", TRUE), 0)
expect_equal(GetNumCodonsForAA("Y", TRUE), 1)
expect_equal(GetNumCodonsForAA("Z", TRUE), 1)
expect_equal(GetNumCodonsForAA("X", TRUE), 2)
})
test_that("Amino Acid Vector", {
expect_equal(aminoAcids,c("A",
"C",
"D",
"E",
"F",
"G",
"H",
"I",
"K",
"L",
"M",
"N",
"P",
"Q",
"R",
"S",
"T",
"V",
"W",
"Y",
"Z",
"X"))
})
test_that("Amino Acid Vector", {
expect_equal(aminoAcids(), c(
"A",
"C",
"D",
"E",
"F",
"G",
"H",
"I",
"K",
"L",
"M",
"N",
"P",
"Q",
"R",
"S",
"T",
"V",
"W",
"Y",
"Z",
"X"))
})
library(testthat)
library(ribModel)
context("Gene")
g <- new(Gene)
test_that("set ID", {
g$id = "blah"
expect_equal(g$id, "blah")
})
library(testthat)
library(ribModel)
context("Gene")
g <- new(Gene)
test_that("set ID", {
g$id = "blah"
expect_equal(g$id, "blah")
})
test_that("set description", {
g$description = "blah blah"
expect_equal(g$description, "blah blah")
})
test_that("set sequence", {
g$seq = "ATGCTCATTCTCACTGCTGCCTCGTAG"
expect_equal(g$seq, "ATGCTCATTCTCACTGCTGCCTCGTAG")
})
test_that("get Sequence Summary", {
ss2 <- g$getSequenceSummary()
expect_equal(ss, ss2)
})
expect_equal(g$getNucleotideAt(0), "A")
expect_equal(g$getNucleotideAt(0), "A")
expect_equal(g$getNucleotideAt(0), "A")})
test_that("Length", {
expect_that(g$length(), 27)
})
test_that("Length", {
expect_equal(g$length(), 27)
})
library(testthat)
library(ribModel)
context("Gene")
g <- new(Gene)
test_that("set ID", {
g$id = "blah"
expect_equal(g$id, "blah")
})
test_that("set description", {
g$description = "blah blah"
expect_equal(g$description, "blah blah")
})
test_that("set sequence", {
g$seq = "ATGCTCATTCTCACTGCTGCCTCGTAG"
expect_equal(g$seq, "ATGCTCATTCTCACTGCTGCCTCGTAG")
})
ss <- new(SequenceSummary, "ATGCTCATTCTCACTGCTGCCTCGTAG")
test_that("get Sequence Summary", {
ss2 <- g$getSequenceSummary()
expect_equal(ss, ss2)
})
test_that("get Nucleotide At", {
expect_equal(g$getNucleotideAt(0), "A")
expect_equal(g$getNucleotideAt(1), "T")
expect_equal(g$getNucleotideAt(2), "G")
expect_equal(g$getNucleotideAt(3), "C")
expect_equal(g$getNucleotideAt(4), "T")
expect_equal(g$getNucleotideAt(5), "C")
expect_equal(g$getNucleotideAt(6), "A")
expect_equal(g$getNucleotideAt(7), "T")
expect_equal(g$getNucleotideAt(8), "T")
expect_equal(g$getNucleotideAt(9), "C")
expect_equal(g$getNucleotideAt(10), "T")
expect_equal(g$getNucleotideAt(11), "C")
expect_equal(g$getNucleotideAt(12), "A")
expect_equal(g$getNucleotideAt(13), "C")
expect_equal(g$getNucleotideAt(14), "T")
expect_equal(g$getNucleotideAt(15), "G")
expect_equal(g$getNucleotideAt(16), "C")
expect_equal(g$getNucleotideAt(17), "T")
expect_equal(g$getNucleotideAt(18), "G")
expect_equal(g$getNucleotideAt(19), "C")
expect_equal(g$getNucleotideAt(20), "C")
expect_equal(g$getNucleotideAt(21), "T")
expect_equal(g$getNucleotideAt(22), "C")
expect_equal(g$getNucleotideAt(23), "G")
expect_equal(g$getNucleotideAt(24), "T")
expect_equal(g$getNucleotideAt(25), "A")
expect_equal(g$getNucleotideAt(26), "G")
})
test_that("Length", {
expect_equal(g$length(), 27)
})
test_that("Reverse Complement", {
expect_equal(g$reverseComplement()$seq, "CTACGAGGCAGCAGTGAGAATGAGCAT")
})
test_that("AA Sequence", {
expect_equal(g$toAASequence(), "MLILTAASX")
})
test_that("clear", {
g$clear()
expect_equal(g$id, "")
expect_equal(g$description, "")
expect_equal(g$seq, "")
})
test_that("clean Sequence", {
g$seq <- "ATGGTAACTTAG"
g$cleanSeq()
expect_equal(g$seq, "ATGGTAACTTAG")
#  g$seq <- "ATGGTAACTNNNQQQTAG"
#  g$cleanSeq()
#  expect_equal(g$seq, "ATGGTAACTNNNTAG")
})
g$clear()
g$seq <- "ATGCTCATTCTCACTGCTGCCTCGTAG"
test_that("get AA Count", {
expect_equal(g$getAACount("M"), 1)
expect_equal(g$getAACount("L"), 2)
expect_equal(g$getAACount("I"), 1)
expect_equal(g$getAACount("T"), 1)
expect_equal(g$getAACount("A"), 2)
expect_equal(g$getAACount("S"), 1)
expect_equal(g$getAACount("X"), 1)
expect_equal(g$getAACount("G"), 0)
})
test_that("get Codon Counts", {
expect_equal(g$getCodonCount("ATG"), 1)
expect_equal(g$getCodonCount("CTC"), 2)
expect_equal(g$getCodonCount("ATT"), 1)
expect_equal(g$getCodonCount("ACT"), 1)
expect_equal(g$getCodonCount("GCT"), 1)
expect_equal(g$getCodonCount("GCC"), 1)
expect_equal(g$getCodonCount("TCG"), 1)
expect_equal(g$getCodonCount("TAG"), 1)
expect_equal(g$getCodonCount("AAA"), 0)
})
test_that("get RFP Observed", {
g$setRFPObserved(4, 35)
g$setRFPObserved(16, 45)
g$setRFPObserved(54, 2)
g$setRFPObserved(45, 0)
expect_equal(g$getRFPObserved("TGC"), 35)
expect_equal(g$getRFPObserved("CAC"), 45)
expect_equal(g$getRFPObserved("GTG"),2)
expect_equal(g$getRFPObserved("TCC"), 0)
})
test_that("get Codon Positions", {
expect_equal(g$getCodonPositions("ATG"), c(0))
expect_equal(g$getCodonPositions("CTC"), c(1,3))
expect_equal(g$getCodonPositions("ATT"), c(2))
expect_equal(g$getCodonPositions("ACT"), c(4))
expect_equal(g$getCodonPositions("GCT"), c(5))
expect_equal(g$getCodonPositions("GCC"), c(6))
expect_equal(g$getCodonPositions("TCG"), c(7))
expect_equal(g$getCodonPositions("TAG"), c(8))
expect_equal(g$getCodonPositions("GTG"), numeric(0))
})
dnorm(-2.039, -9.011, 0.179, log = TRUE)
?dnorm
dnorm(-2.039, -9.011, 0.179, log = FALSE)
log(1)
pi
log(sqrt(2 * pi))
options(digits=22)
options(digits=15)
log(sqrt(2 * pi))
options(digits=16)
options(digits=16)
log(sqrt(2 * pi))
x <- -2.039
m <- -9.011
s <- 0.179
dnorm(-2.039, -9.011, 0.179, log = TRUE)
a <- (x - m)/s
a
-0.918938533204673 - log(s) - (0.5*a*a)
?par
?dlnorm
methods(dlnorm)
getMethod("dlnorm")
dlnorm
clear
getMethod("C_dlnorm")
edit(getAnywhere('dlnorm'))
log(1)
log(1)
log(sqrt(2*pi))
library(ribModel)
?initializeGenomeObject
?initializeGenomeObject
?initializeGenomeObject
?initializeGenomeObject
?sum
?initializeGenomeObject
source('~/GitHub/RibModelFramework/ribModel/R/genomeObject.R')
rm(list=ls())
library(ribModel)
#read genome
genome.file <- "../data/FONSE/fonse2.fasta"
phi.file <- "../data/FONSE/genome_2000.phi.csv"
mut.file <- "../data/FONSE/S.cer.mut.csv"
sel.file <- "../data/FONSE/selection2ref.csv"
from.good.values <- FALSE
genome <- initializeGenomeObject(genome.file)
setwd("~/GitHub/RibModelDev/DevRscripts")
genome <- initializeGenomeObject(genome.file)
sphi_init <- 1
numMixtures <- 1
mixDef <- "allUnique"
#geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457), rep(1, 3903))
#geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457))
#geneAssignment <- c(rep(1,500), rep(2,500))
#geneAssignment <- c(rep(1,448), rep(2,457))
geneAssignment <- rep(1,length(genome))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, model="FONSE", split.serine = TRUE,
mixture.definition = mixDef)
