rm(list=ls())
library(ribModel)
parameter <- loadParameterObject(c("RFPObject1.Rdat", "RFPObject2.Rdat"))
mcmc <- loadMCMCObject(c("MCMCObject1.Rdat", "MCMCObject2.Rdat"))
setwd("~/Desktop/RibModelDevScripts/RibModelDev/DevRscripts")
genome <- initializeGenomeObject(file = "../data/rfp/rfp.counts.by.codon.and.gene.GSE63789.wt.csv", FALSE)
trace <- parameter$getTraceObject()
samples <- mcmc$getSamples()
pdf("test1.pdf")
plot(mcmc) #plots the whole logliklihood trace
#Here I take a subset of the trace values for the logliklihood trace and plot them.
#The primary reason for doing this is the "jump" that throws the scale of the graph
#at the beginning is removed by taking out the beginning values.
loglik.trace <- mcmc$getLogLikelihoodTrace()
start <- length(loglik.trace) * 0.5 #the multiplier determines how much of the beginning trace is
#eliminated.
logL <- logL <- mean(loglik.trace[start:length(loglik.trace)]) #get the mean for the subset
#axis(1,at=start:length(loglik.trace), labels=start:length(loglik.trace))
plot(loglik.trace[start:length(loglik.trace)], type="l", main=paste("logL:", logL), xlab="Sample", ylab="log(Likelihood)")
grid (NULL,NULL, lty = 6, col = "cornsilk2")
plot(trace, what = "MixtureProbability") #right now, will be straight line (mix =1)
plot(trace, what = "Mphi")
plot(trace, what = "Sphi")
plot(trace, what = "ExpectedPhi")
loglik.trace <- mcmc$getLogLikelihoodTrace()
acf(loglik.trace)
acf(loglik.trace[start:length(loglik.trace)])
dev.off()
trace <- parameter$getTraceObject()
samples <- mcmc$getSamples()
pdf("test2.pdf", width = 11, height = 20)
#plot(trace, what = "Expression", geneIndex = 905) #used to make sure gene stabalized, not really needed now
plot(trace, what = "Alpha", mixture = 1)
plot(trace, what = "LambdaPrime", mixture = 1)
dev.off()
pdf("test3.pdf")
cat <- 1
proposal <- FALSE
alphaList <- numeric (61)
lambdaPrimeList <- numeric (61)
waitingTimes <- numeric(61)
alpha.ci <- matrix(0, ncol=2, nrow=61)
lambdaPrime.ci <- matrix(0, ncol=2, nrow=61)
phiList <- numeric(genome$getGenomeSize(F))
ids <- numeric(genome$getGenomeSize(F))
codonList <- codons()
for (i in 1:61)
{
codon <- codonList[i]
alphaList[i] <- parameter$getCodonSpecificPosteriorMean(cat, samples * 0.5, codon, 0, FALSE)
alphaTrace <- trace$getCodonSpecificParameterTraceByMixtureElementForCodon(1, codon, 0, FALSE)
alpha.ci[i,] <- quantile(alphaTrace[(samples * 0.5):samples], probs = c(0.025,0.975))
lambdaPrimeList[i] <- parameter$getCodonSpecificPosteriorMean(cat, samples * 0.5, codon, 1, FALSE)
lambdaPrimeTrace <- trace$getCodonSpecificParameterTraceByMixtureElementForCodon(1, codon, 1, FALSE)
lambdaPrime.ci[i,] <- quantile(lambdaPrimeTrace[(samples * 0.5):samples], probs = c(0.025,0.975))
waitingTimes[i] <- alphaList[i] / lambdaPrimeList[i]
}
plot(NULL, NULL, xlim=range(1:61, na.rm = T), ylim=range(alpha.ci),
main = "Confidence Intervals for Alpha Parameter", xlab = "Codons",
ylab = "Estimated values", axes=F)
confidenceInterval.plot(x = 1:61, y = alphaList, sd.y = alpha.ci)
axis(2)
axis(1, tck = 0.02, labels = codonList[1:61], at=1:61, las=2, cex.axis=.6)
plot(NULL, NULL, xlim=range(1:61, na.rm = T), ylim=range(lambdaPrime.ci),
main = "Confidence Intervals for LambdaPrime Parameter", xlab = "Codons",
ylab = "Estimated values", axes=F)
confidenceInterval.plot(x = 1:61, y = lambdaPrimeList, sd.y = lambdaPrime.ci)
axis(2)
axis(1, tck = 0.02, labels = codonList[1:61], at=1:61, las=2, cex.axis=.6)
newWaitTimes <- numeric(61)
for (i in 1:61) {
newWaitTimes[i] <- (1.0/waitingTimes[i])
}
################################
for (geneIndex in 1:genome$getGenomeSize(F)) {
phiList[geneIndex] <- parameter$getSynthesisRatePosteriorMeanByMixtureElementForGene(samples * 0.5, geneIndex, 1)
}
for (i in 1:genome$getGenomeSize(F))
{
g <- genome$getGeneByIndex(i, FALSE)
ids[i] <- g$id
}
plot(NULL, NULL, xlim=range(alpha.ci, na.rm = T), ylim=range(lambdaPrime.ci),
main = "Confidence Intervals for Alpha Parameter", xlab = "alpha",
ylab = "lambdaPrime", axes=T)
upper.panel.plot(x = alphaList, y = lambdaPrimeList, sd.x = alpha.ci, sd.y = lambdaPrime.ci)
#corrolation between RFPModel and Premal's data
X <- read.table("../data/rfp/codon.specific.translation.rates.table.csv", header = TRUE, sep =",")
X <- X[order(X[,1]) , ]
XM <- matrix(c(X[,1], X[,2]), ncol = 2, byrow = FALSE)
Y <- data.frame(codonList[-c(62,63,64)], newWaitTimes)
colnames(Y) <- c("Codon", "PausingTime")
Y <- Y[order(Y[,1]) , ]
plot(NULL, NULL, xlim=range(XM[,2], na.rm = T), ylim=range(Y[,2]),
main = "Correlation Between Premal and RFP Model Pausing Times", xlab = "Premal's Values", ylab = "Run Values")
upper.panel.plot(XM[,2], Y[,2])
dev.off()
codons
codonList
rm(list=ls())
library(ribModel)
genome <- initializeGenomeObject(file =
"../data/rfp/rfp.counts.by.codon.and.gene.GSE63789.wt.csv", FALSE)
sphi_init <- c(2)
numMixtures <- 1
mixDef <- "allUnique"
geneAssignment <- c(rep(1, genome$getGenomeSize(F)))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, model= "RFP", split.serine = TRUE, mixture.definition = mixDef)
#parameter <- initializeParameterObject(model="RFP", restart.file="10_restartFile.rst")
samples <- 10
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
model <- initializeModelObject(parameter, "RFP")
setRestartSettings(mcmc, "restartFile.rst", adaptiveWidth, TRUE)
system.time(
runMCMC(mcmc, genome, model, 8)
)
trace <- parameter$getTraceObject()
pdf("RFP_Genome_allUnique_startCSP_True_startPhi_true_adaptSphi_True.pdf")
plot(mcmc) #plots the whole logliklihood trace
#Here I take a subset of the trace values for the logliklihood trace and plot them.
#The primary reason for doing this is the "jump" that throws the scale of the graph
#at the beginning is removed by taking out the beginning values.
loglik.trace <- mcmc$getLogLikelihoodTrace()
start <- length(loglik.trace) * 0.5 #the multiplier determines how much of the beginning trace is
#eliminated.
logL <- logL <- mean(loglik.trace[start:length(loglik.trace)]) #get the mean for the subset
plot(loglik.trace[start:length(loglik.trace)], type="l", main=paste("logL:", logL), xlab="Sample", ylab="log(Likelihood)")
grid (NULL,NULL, lty = 6, col = "cornsilk2")
plot(trace, what = "MixtureProbability")
plot(trace, what = "Mphi")
plot(trace, what = "Sphi")
plot(trace, what = "ExpectedPhi")
loglik.trace <- mcmc$getLogLikelihoodTrace()
acf(loglik.trace)
acf(loglik.trace[start:length(loglik.trace)])
dev.off()
pdf("RFP_CSP_Values_Mixture1.pdf", width = 11, height = 20)
#plot(trace, what = "Expression", geneIndex = 905) #used to make sure gene stabalized, not really needed now
plot(trace, what = "Alpha", mixture = 1)
plot(trace, what = "LambdaPrime", mixture = 1)
dev.off()
pdf("ConfidenceIntervalsForAlphaAndLambdaPrime.pdf")
#eventually this will need loop over all categories if there are multiple mixtures
cat <- 1
proposal <- FALSE
alphaList <- numeric (61)
lambdaPrimeList <- numeric (61)
waitingTimes <- numeric(61)
alpha.ci <- matrix(0, ncol=2, nrow=61)
lambdaPrime.ci <- matrix(0, ncol=2, nrow=61)
phiList <- numeric(genome$getGenomeSize(F))
ids <- numeric(genome$getGenomeSize(F))
codonList <- codons()
for (i in 1:61)
{
codon <- codonList[i]
alphaList[i] <- parameter$getCodonSpecificPosteriorMean(cat, samples * 0.5, codon, 0)
alphaTrace <- trace$getCodonSpecificParameterTraceByMixtureElementForCodon(1, codon, 0, FALSE)
alpha.ci[i,] <- quantile(alphaTrace[(samples * 0.5):samples], probs = c(0.025,0.975))
lambdaPrimeList[i] <- parameter$getCodonSpecificPosteriorMean(cat, samples * 0.5, codon, 1)
lambdaPrimeTrace <- trace$getCodonSpecificParameterTraceByMixtureElementForCodon(1, codon, 1)
lambdaPrime.ci[i,] <- quantile(lambdaPrimeTrace[(samples * 0.5):samples], probs = c(0.025,0.975))
waitingTimes[i] <- alphaList[i] * lambdaPrimeList[i]
}
waitRates <- numeric(61)
for (i in 1:61) {
waitRates[i] <- (1.0/waitingTimes[i])
}
for (geneIndex in 1:genome$getGenomeSize(F)) {
phiList[geneIndex] <- parameter$getSynthesisRatePosteriorMeanByMixtureElementForGene(samples * 0.5, geneIndex, 1)
}
for (i in 1:genome$getGenomeSize())
{
g <- genome$getGeneByIndex(i, FALSE)
ids[i] <- g$id
}
#Plot confidence intervals for alpha and lambda prime
plot(NULL, NULL, xlim=range(1:61, na.rm = T), ylim=range(alpha.ci),
main = "Confidence Intervals for Alpha Parameter", xlab = "Codons",
ylab = "Estimated values", axes=F)
confidenceInterval.plot(x = 1:61, y = alphaList, sd.y = alpha.ci)
axis(2)
axis(1, tck = 0.02, labels = codonList[1:61], at=1:61, las=2, cex.axis=.6)
plot(NULL, NULL, xlim=range(1:61, na.rm = T), ylim=range(lambdaPrime.ci),
main = "Confidence Intervals for LambdaPrime Parameter", xlab = "Codons",
ylab = "Estimated values", axes=F)
confidenceInterval.plot(x = 1:61, y = lambdaPrimeList, sd.y = lambdaPrime.ci)
axis(2)
axis(1, tck = 0.02, labels = codonList[1:61], at=1:61, las=2, cex.axis=.6)
#corrolation between RFPModel and Premal's wait rates
#load Premal's data
X <- read.table("../data/rfp/codon.specific.translation.rates.table.csv", header = TRUE, sep =",")
X <- X[order(X[,1]) , ]
XM <- matrix(c(X[,1], X[,2]), ncol = 2, byrow = FALSE)
Y <- data.frame(codonList[-c(62,63,64)], waitRates)
colnames(Y) <- c("Codon", "PausingTimeRates")
Y <- Y[order(Y[,1]) , ]
plot(NULL, NULL, xlim=range(XM[,2], na.rm = T), ylim=range(Y[,2]),
main = "Correlation Between Premal and RFP Model Pausing Time Rates", xlab = "Premal's Rates", ylab = "RFP's Rates")
upper.panel.plot(XM[,2], Y[,2])
dev.off()
pdf("ConfidenceIntervalsForAlphaAndLambdaPrime.pdf")
cat <- 1
proposal <- FALSE
alphaList <- numeric (61)
lambdaPrimeList <- numeric (61)
waitingTimes <- numeric(61)
alpha.ci <- matrix(0, ncol=2, nrow=61)
lambdaPrime.ci <- matrix(0, ncol=2, nrow=61)
phiList <- numeric(genome$getGenomeSize(F))
ids <- numeric(genome$getGenomeSize(F))
codonList <- codons()
for (i in 1:61)
{
codon <- codonList[i]
alphaList[i] <- parameter$getCodonSpecificPosteriorMean(cat, samples * 0.5, codon, 0)
alphaTrace <- trace$getCodonSpecificParameterTraceByMixtureElementForCodon(1, codon, 0, FALSE)
alpha.ci[i,] <- quantile(alphaTrace[(samples * 0.5):samples], probs = c(0.025,0.975))
lambdaPrimeList[i] <- parameter$getCodonSpecificPosteriorMean(cat, samples * 0.5, codon, 1)
lambdaPrimeTrace <- trace$getCodonSpecificParameterTraceByMixtureElementForCodon(1, codon, 1)
lambdaPrime.ci[i,] <- quantile(lambdaPrimeTrace[(samples * 0.5):samples], probs = c(0.025,0.975))
waitingTimes[i] <- alphaList[i] * lambdaPrimeList[i]
}
codonList <- codons()
for (i in 1:61)
{
codon <- codonList[i]
alphaList[i] <- parameter$getCodonSpecificPosteriorMean(cat, samples * 0.5, codon, 0)
alphaTrace <- trace$getCodonSpecificParameterTraceByMixtureElementForCodon(1, codon, 0, FALSE)
alpha.ci[i,] <- quantile(alphaTrace[(samples * 0.5):samples], probs = c(0.025,0.975))
lambdaPrimeList[i] <- parameter$getCodonSpecificPosteriorMean(cat, samples * 0.5, codon, 1)
lambdaPrimeTrace <- trace$getCodonSpecificParameterTraceByMixtureElementForCodon(1, codon, 1, FALSE)
lambdaPrime.ci[i,] <- quantile(lambdaPrimeTrace[(samples * 0.5):samples], probs = c(0.025,0.975))
waitingTimes[i] <- alphaList[i] * lambdaPrimeList[i]
}
for (i in 1:61)
{
codon <- codonList[i]
alphaList[i] <- parameter$getCodonSpecificPosteriorMean(cat, samples * 0.5, codon, 0, FALSE)
alphaTrace <- trace$getCodonSpecificParameterTraceByMixtureElementForCodon(1, codon, 0, FALSE)
alpha.ci[i,] <- quantile(alphaTrace[(samples * 0.5):samples], probs = c(0.025,0.975))
lambdaPrimeList[i] <- parameter$getCodonSpecificPosteriorMean(cat, samples * 0.5, codon, 1, FALSE)
lambdaPrimeTrace <- trace$getCodonSpecificParameterTraceByMixtureElementForCodon(1, codon, 1, FALSE)
lambdaPrime.ci[i,] <- quantile(lambdaPrimeTrace[(samples * 0.5):samples], probs = c(0.025,0.975))
waitingTimes[i] <- alphaList[i] * lambdaPrimeList[i]
}
waitRates <- numeric(61)
for (i in 1:61) {
waitRates[i] <- (1.0/waitingTimes[i])
}
for (geneIndex in 1:genome$getGenomeSize(F)) {
phiList[geneIndex] <- parameter$getSynthesisRatePosteriorMeanByMixtureElementForGene(samples * 0.5, geneIndex, 1)
}
for (i in 1:genome$getGenomeSize())
{
g <- genome$getGeneByIndex(i, FALSE)
ids[i] <- g$id
}
for (i in 1:genome$getGenomeSize(FALSE))
{
g <- genome$getGeneByIndex(i, FALSE)
ids[i] <- g$id
}
#Plot confidence intervals for alpha and lambda prime
plot(NULL, NULL, xlim=range(1:61, na.rm = T), ylim=range(alpha.ci),
main = "Confidence Intervals for Alpha Parameter", xlab = "Codons",
ylab = "Estimated values", axes=F)
confidenceInterval.plot(x = 1:61, y = alphaList, sd.y = alpha.ci)
axis(2)
axis(1, tck = 0.02, labels = codonList[1:61], at=1:61, las=2, cex.axis=.6)
plot(NULL, NULL, xlim=range(1:61, na.rm = T), ylim=range(lambdaPrime.ci),
main = "Confidence Intervals for LambdaPrime Parameter", xlab = "Codons",
ylab = "Estimated values", axes=F)
confidenceInterval.plot(x = 1:61, y = lambdaPrimeList, sd.y = lambdaPrime.ci)
axis(2)
axis(1, tck = 0.02, labels = codonList[1:61], at=1:61, las=2, cex.axis=.6)
X <- read.table("../data/rfp/codon.specific.translation.rates.table.csv", header = TRUE, sep =",")
X <- X[order(X[,1]) , ]
XM <- matrix(c(X[,1], X[,2]), ncol = 2, byrow = FALSE)
Y <- data.frame(codonList[-c(62,63,64)], waitRates)
colnames(Y) <- c("Codon", "PausingTimeRates")
Y <- Y[order(Y[,1]) , ]
plot(NULL, NULL, xlim=range(XM[,2], na.rm = T), ylim=range(Y[,2]),
main = "Correlation Between Premal and RFP Model Pausing Time Rates", xlab = "Premal's Rates", ylab = "RFP's Rates")
upper.panel.plot(XM[,2], Y[,2])
dev.off()
truePsiValues <- read.csv( "../data/rfp/RFPPhiValues.csv")
truePsiValues
truePsiValues <- truePsiValues[order(truePsiValues[,1]) , ]
truePsiValues
truePsiValues <- truePsiValues[order(truePsiValues[,1]) , ]
truePsiValues
truePsiValues[,2]
rm(list=ls())
library(ribModel)
with.phi <- FALSE
if (with.phi) {
genome <- initializeGenomeObject(file = "../ribModel/data/simulatedAllUniqueR.fasta", expression.file = "../ribModel/data/simulatedAllUniqueR_phi.csv")
#genome <- initializeGenomeObject(file = "../ribModel/data/simulatedOneMix.fasta", expression.file = "../ribModel/data/simulatedOneMix_simphi.csv")
} else {
#genome <- initializeGenomeObject(file = "../ribModel/data/simulatedAllUniqueR.fasta")
#genome <- initializeGenomeObject(file = "../ribModel/data/simulatedAllUniqueR_unevenMixtures.fasta")
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
#genome <- initializeGenomeObject(file = "../ribModel/data/genome_2000.fasta")
#genome <- initializeGenomeObject(file = "../ribModel/data/Skluyveri.fasta")
#genome <- initializeGenomeObject(file = "../../../organisms/human/data/human_genome_cds_brain.fasta")
}
#initialize parameter object
sphi_init <- c(1,1,1)
numMixtures <- 3
mixDef <- "allUnique"
geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457), rep(1, 3403), rep(3, 500)) # S.kluyveri full genome
#geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457))
#geneAssignment <- rep(1,328) # human brain
#geneAssignment <- c(rep(1,200), rep(2,800))
#geneAssignment <- sample(x = c(1,2), size = 806, replace = T) #c(rep(1,400), rep(2,406))
#geneAssignment <- sample(x = c(1,2), size = 806, replace = T) #c(rep(1,400), rep(2,406))
#geneAssignment <- rep(1,2000)
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
#parameter <- initializeParameterObject(restart.file = "2000restartFile.rst")
phivals <- parameter$readPhiValues( "../ribModel/data/simulatedAllUniqueR_phi.csv")
#parameter$initializeSynthesisRateByRandom(phivals)
parameter$initMutationCategories(c("../ribModel/data/simulated_mutation0.csv", "../ribModel/data/simulated_mutation1.csv") , 2)
parameter$initSelectionCategories(c("../ribModel/data/simulated_selection0.csv", "../ribModel/data/simulated_selection1.csv") , 2)
# initialize MCMC object
samples <- 10
thining <- 10
adaptiveWidth <- 10
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi)
setRestartSettings(mcmc, "restartFile.rst", adaptiveWidth*200, TRUE)
#run mcmc on genome with parameter using model
start <- Sys.time()
system.time(
runMCMC(mcmc, genome, model, 4, divergence.iteration)
)
end <- Sys.time()
end - start
library(ribModel)
rm(list=ls())
#read genome
with.phi <- FALSE
if (with.phi) {
genome <- initializeGenomeObject(file = "../data/twoMixtures/simulatedAllUniqueR.fasta", expression.file = "../data/twoMixtures/simulatedAllUniqueR_phi.csv")
} else {
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
}
library(ribModel)
rm(list=ls())
#read genome
with.phi <- FALSE
if (with.phi) {
genome <- initializeGenomeObject(file = "../data/twoMixtures/simulatedAllUniqueR.fasta", expression.file = "../data/twoMixtures/simulatedAllUniqueR_phi.csv")
} else {
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
}
#initialize parameter object
sphi_init <- (c(1,1,1))
numMixtures <- 3
mixDef <- "allUnique"
geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457), rep(1, 3403), rep(3, 500))
#geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457))
#geneAssignment <- c(rep(1,448), rep(2,457))
#geneAssignment <- c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
parameter <- initializeParameterObject(model="ROC", restart.file="10restartFile.rst")
