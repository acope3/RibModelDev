adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "RFP")
setRestartSettings(mcmc, "restartFile.rst", 10, TRUE)
#run mcmc on genome with parameter using model
system.time(
runMCMC(mcmc, genome, model, 8)
)
writeParameterObject(parameter, file="RFPObject2.Rdat")
writeMCMCObject(mcmc, file="MCMCObject2.Rdat")
rm(list=ls())
library(ribModel)
parameter <- loadParameterObject(c("RFPObject1.Rdat", "RFPObject2.Rdat"))
mcmc <- loadMCMCObject(c("MCMCObject1.Rdat", "MCMCMObject2.Rdat"))
mcmc <- loadMCMCObject(c("MCMCObject1.Rdat", "MCMCObject2.Rdat"))
genome <- initializeGenomeObject(file = "../data/rfp/rfp.counts.by.codon.and.gene.GSE63789.wt.csv", FALSE)
trace <- parameter$getTraceObject()
pdf("test1.pdf")
plot(mcmc) #plots the whole logliklihood trace
#Here I take a subset of the trace values for the logliklihood trace and plot them.
#The primary reason for doing this is the "jump" that throws the scale of the graph
#at the beginning is removed by taking out the beginning values.
loglik.trace <- mcmc$getLogLikelihoodTrace()
start <- length(loglik.trace) * 0.5 #the multiplier determines how much of the beginning trace is
#eliminated.
logL <- logL <- mean(loglik.trace[start:length(loglik.trace)]) #get the mean for the subset
plot(loglik.trace[start:length(loglik.trace)], type="l", main=paste("logL:", logL), xlab="Sample", ylab="log(Likelihood)")
grid (NULL,NULL, lty = 6, col = "cornsilk2")
plot(trace, what = "MixtureProbability") #right now, will be straight line (mix =1)
plot(trace, what = "Mphi")
plot(trace, what = "Sphi")
plot(trace, what = "ExpectedPhi")
loglik.trace <- mcmc$getLogLikelihoodTrace()
acf(loglik.trace)
acf(loglik.trace[start:length(loglik.trace)])
dev.off()
pdf("test2.pdf", width = 11, height = 20)
#plot(trace, what = "Expression", geneIndex = 905) #used to make sure gene stabalized, not really needed now
plot(trace, what = "Alpha", mixture = 1)
plot(trace, what = "LambdaPrime", mixture = 1)
dev.off()
pdf("test3.pdf")
cat <- 1
proposal <- FALSE
alphaList <- numeric (61)
lambdaPrimeList <- numeric (61)
waitingTimes <- numeric(61)
phiList <- numeric(genome$getGenomeSize())
ids <- numeric(genome$getGenomeSize())
codonList <- codons()
i <- 1
for (i in 1:61)
{
codon <- codonList[i]
alphaList[i] <- parameter$getCodonSpecificPosteriorMean(cat, samples * 0.5, codon, 0)
lambdaPrimeList[i] <- parameter$getCodonSpecificPosteriorMean(cat, samples * 0.5, codon, 1)
waitingTimes[i] <- alphaList[i] * lambdaPrimeList[i]
}
for (geneIndex in 1:genome$getGenomeSize()) {
}
trace$getSynthesisRateTrace()
trace$getCodonSpecificParameterTrace(1)
parameter$getLastIteration()
source('~/Desktop/RibModelFramework/R/parameterObject.R', echo=TRUE)
parameter <- loadParameterObject(c("RFPObject1.Rdat", "RFPObject2.Rdat"))
mcmc <- loadMCMCObject(c("MCMCObject1.Rdat", "MCMCMObject2.Rdat"))
trace <- parameter$getTraceObject()
pdf("test1.pdf")
plot(mcmc) #plots the whole logliklihood trace
#Here I take a subset of the trace values for the logliklihood trace and plot them.
#The primary reason for doing this is the "jump" that throws the scale of the graph
#at the beginning is removed by taking out the beginning values.
loglik.trace <- mcmc$getLogLikelihoodTrace()
start <- length(loglik.trace) * 0.5 #the multiplier determines how much of the beginning trace is
#eliminated.
logL <- logL <- mean(loglik.trace[start:length(loglik.trace)]) #get the mean for the subset
plot(loglik.trace[start:length(loglik.trace)], type="l", main=paste("logL:", logL), xlab="Sample", ylab="log(Likelihood)")
grid (NULL,NULL, lty = 6, col = "cornsilk2")
plot(trace, what = "MixtureProbability") #right now, will be straight line (mix =1)
plot(trace, what = "Mphi")
plot(trace, what = "Sphi")
plot(trace, what = "ExpectedPhi")
loglik.trace <- mcmc$getLogLikelihoodTrace()
acf(loglik.trace)
acf(loglik.trace[start:length(loglik.trace)])
dev.off()
pdf("test2.pdf", width = 11, height = 20)
#plot(trace, what = "Expression", geneIndex = 905) #used to make sure gene stabalized, not really needed now
plot(trace, what = "Alpha", mixture = 1)
plot(trace, what = "LambdaPrime", mixture = 1)
dev.off()
samples <- mcmc$getSamples()
samples
library(ribModel)
rm(list=ls())
#read genome
with.phi <- FALSE
if (with.phi) {
genome <- initializeGenomeObject(file = "../data/twoMixtures/simulatedAllUniqueR.fasta", expression.file = "../data/twoMixtures/simulatedAllUniqueR_phi.csv")
} else {
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
}
#initialize parameter object
sphi_init <- (c(1,1,1))
numMixtures <- 3
mixDef <- "allUnique"
geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457), rep(1, 3403), rep(3, 500))
#geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457))
#geneAssignment <- c(rep(1,448), rep(2,457))
#geneAssignment <- c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
#parameter <- initializeParameterObject(model="ROC", restart.file="50restartFile.rst")
# initialize MCMC object
samples <- 30
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "ROC", with.phi)
setRestartSettings(mcmc, "restartFile.rst", adaptiveWidth, TRUE)
#run mcmc on genome with parameter using model
system.time(
runMCMC(mcmc, genome, model, 8)
)
trace <- parameter$getTraceObject()
trace$getStdDevSynthesisRateTraces()
trace$getCodonSpecificParameterTrace(1)
trace$getSynthesisOffsetTrace()
trace$getCodonSpecificAcceptanceRatioTrace()
trace$getSynthesisRateTrace()
trace$getMixutreAssignmentTrace()
trace$getMixtureProbabilitiesTrace()
library(ribModel)
rm(list=ls())
#read genome
genome.file <- "../data/FONSE/genome_2000.fasta"
phi.file <- "../data/realGenomes/Scereviciae.phi.csv"
mut.file <- "../data/realGenomes/Scereviciae.mut.csv"
sel.file <- "../data/realGenomes/Scereviciae.sel.csv"
from.good.values <- FALSE
genome <- initializeGenomeObject(genome.file)
sphi_init <- 1
numMixtures <- 1
mixDef <- "allUnique"
#geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457), rep(1, 3903))
#geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457))
#geneAssignment <- c(rep(1,448), rep(2,457))
#geneAssignment <- c(rep(1,500), rep(2,500))
geneAssignment <- rep(1,length(genome))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, model="FONSE", split.serine = TRUE,
mixture.definition = mixDef)
#parameter <- initializeParameterObject(model="FONSE", restart.file="10restartFile.rst")
# initialize MCMC object
samples <- 10
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "FONSE")
if(from.good.values) {
phi <- read.table(phi.file, header = T, sep = ",")
phi.values <- phi[,2]
parameter$initializeSynthesisRateByList(phi.values)
}
setRestartSettings(mcmc, "restartFile.rst", 10, TRUE)
#run mcmc on genome with parameter using model
system.time(
runMCMC(mcmc, genome, model, 16)
)
rm(list=ls())
library(ribModel)
#read genome
genome <- initializeGenomeObject(file = "../data/rfp/rfp.counts.by.codon.and.gene.GSE63789.wt.csv", FALSE)
#initialize parameter object
sphi_init <- 2
numMixtures <- 1
mixDef <- "allUnique"
geneAssignment <- c(rep(1, genome$getGenomeSize()))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, model= "RFP", split.serine = TRUE, mixture.definition = mixDef)
#parameter <- initializeParameterObject(model="RFP", restart.file="50restartFile.rst")
# initialize MCMC object
samples <- 30
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "RFP")
setRestartSettings(mcmc, "restartFile.rst", 10, TRUE)
#run mcmc on genome with parameter using model
system.time(
runMCMC(mcmc, genome, model, 8)
)
trace <- parameter$getTraceObject()
trace <- parameter$getTraceObject()
writeParameterObject(parameter, file="RFPObject1.Rdat")
writeMCMCObject(mcmc, file="MCMCObject1.Rdat")
trace$getCodonSpecificParameterTrace(1)
rm(list=ls())
library(ribModel)
#read genome
genome <- initializeGenomeObject(file = "../data/rfp/rfp.counts.by.codon.and.gene.GSE63789.wt.csv", FALSE)
#initialize parameter object
sphi_init <- 2
numMixtures <- 1
mixDef <- "allUnique"
geneAssignment <- c(rep(1, genome$getGenomeSize()))
#parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, model= "RFP", split.serine = TRUE, mixture.definition = mixDef)
parameter <- initializeParameterObject(model="RFP", restart.file="30restartFile.rst")
# initialize MCMC object
samples <- 40
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "RFP")
setRestartSettings(mcmc, "restartFile.rst", 10, TRUE)
#run mcmc on genome with parameter using model
system.time(
runMCMC(mcmc, genome, model, 8)
)
writeParameterObject(parameter, file="RFPObject2.Rdat")
writeMCMCObject(mcmc, file="MCMCObject2.Rdat")
rm(list=ls())
library(ribModel)
parameter <- loadParameterObject(c("RFPObject1.Rdat", "RFPObject2.Rdat"))
trace <- parameter$getTraceObject()
trace$getCodonSpecificParameterTrace(1)
rm(list=ls())
library(ribModel)
files <- c("RFPObject1.Rdat", "RFPObject2.Rdat")
firstModel <- "Invalid model"
for (i in 1:length(files)){
tempEnv <- new.env();
load(file = files[i], envir = tempEnv)
if (i == 1){
firstModel <- tempEnv$model
}else{
if (firstModel != tempEnv$model){
stop("The models do not match between files")
}#end of error check
}#end of if-else
}#end of for
parameter <- new(RFPParameter)
for (i in 1:length(files)) {
tempEnv <- new.env();
load(file = files[i], envir = tempEnv)
if (i == 1) {
categories <- tempEnv$paramBase$categories
categories.matrix <- do.call("rbind", tempEnv$paramBase$categories)
numMixtures <- tempEnv$paramBase$numMix
numMutationCategories <- tempEnv$paramBase$numMut
numSelectionCategories <- tempEnv$paramBase$numSel
mixtureAssignment <- tempEnv$paramBase$curMixAssignment
lastIteration <- tempEnv$paramBase$lastIteration
stdDevSynthesisRateTraces <- tempEnv$paramBase$stdDevSynthesisRateTraces
stdDevSynthesisRateAcceptanceRatioTrace <- tempEnv$paramBase$stdDevSynthesisRateAcceptRatTrace
synthesisRateTrace <- tempEnv$paramBase$synthRateTrace
synthesisRateAcceptanceRatioTrace <- tempEnv$paramBase$synthAcceptRatTrace
mixtureAssignmentTrace <- tempEnv$paramBase$mixAssignTrace
mixtureProbabilitiesTrace <- tempEnv$paramBase$mixProbTrace
codonSpecificAcceptanceRatioTrace <- tempEnv$paramBase$codonSpecificAcceptRatTrace
} else {
if (sum(categories.matrix != do.call("rbind", tempEnv$paramBase$categories)) != 0){
stop("categories is not the same between all files")
}#end of error check
if (numMixtures != tempEnv$paramBase$numMix){
stop("The number of mixtures is not the same between files")
}
if (numMutationCategories != tempEnv$paramBase$numMut){
stop("The number of mutation categories is not the same between files")
}
if (numSelectionCategories != tempEnv$paramBase$numSel){
stop("The number of selection categories is not the same between files")
}
if (length(mixtureAssignment) != length(tempEnv$paramBase$curMixAssignment)){
stop("The length of the mixture assignment is not the same between files.
Make sure the same genome is used on each run.")
}
curStdDevSynthesisRateTraces <- tempEnv$paramBase$stdDevSynthesisRateTraces
curStdDevSynthesisRateAcceptanceRatioTrace <- tempEnv$paramBase$stdDevSynthesisRateAcceptRatTrace
curSynthesisRateTrace <- tempEnv$paramBase$synthRateTrace
curSynthesisRateAcceptanceRatioTrace <- tempEnv$paramBase$synthAcceptRatTrace
curMixtureAssignmentTrace <- tempEnv$paramBase$mixAssignTrace
curMixtureProbabilitiesTrace <- tempEnv$paramBase$mixProbTrace
curCodonSpecificAcceptanceRatioTrace <- tempEnv$paramBase$codonSpecificAcceptRatTrace
lastIteration <- lastIteration + tempEnv$paramBase$lastIteration
#assuming all checks have passed, time to concatanate traces
max <- tempEnv$paramBase$lastIteration + 1
stdDevSynthesisRateTraces <- combineTwoDimensionalTrace(stdDevSynthesisRateTraces, curStdDevSynthesisRateTraces, max)
stdDevSynthesisRateAcceptanceRatioTrace <- c(stdDevSynthesisRateAcceptanceRatioTrace,
curStdDevSynthesisRateAcceptanceRatioTrace[2:max])
synthesisRateTrace <- combineThreeDimensionalTrace(synthesisRateTrace, curSynthesisRateTrace, max)
synthesisRateAcceptanceRatioTrace <- combineThreeDimensionalTrace(synthesisRateAcceptanceRatioTrace, curSynthesisRateAcceptanceRatioTrace, max)
mixtureAssignmentTrace <- combineTwoDimensionalTrace(mixtureAssignmentTrace, curMixtureAssignmentTrace, max)
mixtureProbabilitiesTrace <- combineTwoDimensionalTrace(mixtureProbabilitiesTrace, curMixtureProbabilitiesTrace, max)
codonSpecificAcceptanceRatioTrace <- combineTwoDimensionalTrace(codonSpecificAcceptanceRatioTrace, curCodonSpecificAcceptanceRatioTrace, max)
}
}
parameter$setCategories(categories)
parameter$setCategoriesForTrace()
parameter$numMixtures <- numMixtures
parameter$numMutationCategories <- numMutationCategories
parameter$numSelectionCategories <- numSelectionCategories
parameter$setMixtureAssignment(tempEnv$paramBase$curMixAssignment) #want the last in the file sequence
parameter$setLastIteration(lastIteration)
trace <- parameter$getTraceObject()
trace$setStdDevSynthesisRateTraces(stdDevSynthesisRateTraces)
trace$setStdDevSynthesisRateAcceptanceRatioTrace(stdDevSynthesisRateAcceptanceRatioTrace)
trace$setSynthesisRateTrace(synthesisRateTrace)
trace$setSynthesisRateAcceptanceRatioTrace(synthesisRateAcceptanceRatioTrace)
trace$setMixtureAssignmentTrace(mixtureAssignmentTrace)
trace$setMixtureProbabilitiesTrace(mixtureProbabilitiesTrace)
trace$setCodonSpecificAcceptanceRatioTrace(codonSpecificAcceptanceRatioTrace)
parameter$setTraceObject(trace)
trace <- parameter$getTraceObject()
trace <- parameter$getTraceObject()
trace$getStdDevSynthesisRateTraces()
trace$getMixutreAssignmentTrace()
i = 1
tempEnv <- new.env();
load(file = files[i], envir = tempEnv)
if (i == 1){
alphaTrace <- tempEnv$alphaTrace
lambdaPrimeTrace <- tempEnv$lambdaPrimeTrace
}else{
max <- tempEnv$paramBase$lastIteration + 1
curAlphaTrace <- tempEnv$alphaTrace
curLambdaPrimeTrace <- tempEnv$lambdaPrimeTrace
alphaTrace <- combineThreeDimensionalTrace(alphaTrace, curAlphaTrace, max)
lambdaPrimeTrace <- combineThreeDimensionalTrace(lambdaPrimeTrace, curLambdaPrimeTrace, max)
}
alphaTrace
i=2
tempEnv <- new.env();
load(file = files[i], envir = tempEnv)
if (i == 1){
alphaTrace <- tempEnv$alphaTrace
lambdaPrimeTrace <- tempEnv$lambdaPrimeTrace
}else{
max <- tempEnv$paramBase$lastIteration + 1
curAlphaTrace <- tempEnv$alphaTrace
curLambdaPrimeTrace <- tempEnv$lambdaPrimeTrace
alphaTrace <- combineThreeDimensionalTrace(alphaTrace, curAlphaTrace, max)
lambdaPrimeTrace <- combineThreeDimensionalTrace(lambdaPrimeTrace, curLambdaPrimeTrace, max)
}
alphaTrace
rm(list=ls())
library(ribModel)
parameter <- loadParameterObject(c("RFPObject1.Rdat", "RFPObject2.Rdat"))
mcmc <- loadMCMCObject(c("MCMCObject1.Rdat", "MCMCMObject2.Rdat"))
genome <- initializeGenomeObject(file = "../data/rfp/rfp.counts.by.codon.and.gene.GSE63789.wt.csv", FALSE)
trace <- parameter$getTraceObject()
parameter <- loadParameterObject(c("RFPObject1.Rdat", "RFPObject2.Rdat"))
mcmc <- loadMCMCObject(c("MCMCObject1.Rdat", "MCMCMObject2.Rdat"))
genome <- initializeGenomeObject(file = "../data/rfp/rfp.counts.by.codon.and.gene.GSE63789.wt.csv", FALSE)
trace <- parameter$getTraceObject()
trace$getCodonSpecificParameterTrace(1)
parameter1 <- loadParameterObject(c("RFPObject1.Rdat"))
t1 <- parameter1$getTraceObject()
t1$getCodonSpecificParameterTrace(1)
parameter2 <- loadParameterObject(c("RFPObject2.Rdat"))
t2 <- parameter2$getTraceObject()
t2$getCodonSpecificParameterTrace(1)
trace$getCodonSpecificParameterTrace()
trace <- parameter$getTraceObject()
trace$getCodonSpecificParameterTrace(1)
rm(list=ls())
library(ribModel)
parameter <- loadParameterObject(c("RFPObject1.Rdat", "RFPObject2.Rdat"))
mcmc <- loadMCMCObject(c("MCMCObject1.Rdat", "MCMCObject2.Rdat"))
genome <- initializeGenomeObject(file = "../data/rfp/rfp.counts.by.codon.and.gene.GSE63789.wt.csv", FALSE)
trace <- parameter$getTraceObject()
samples <- mcmc$getSamples()
plot(mcmc) #plots the whole logliklihood trace
#Here I take a subset of the trace values for the logliklihood trace and plot them.
#The primary reason for doing this is the "jump" that throws the scale of the graph
#at the beginning is removed by taking out the beginning values.
loglik.trace <- mcmc$getLogLikelihoodTrace()
start <- length(loglik.trace) * 0.5 #the multiplier determines how much of the beginning trace is
#eliminated.
logL <- logL <- mean(loglik.trace[start:length(loglik.trace)]) #get the mean for the subset
plot(loglik.trace[start:length(loglik.trace)], type="l", main=paste("logL:", logL), xlab="Sample", ylab="log(Likelihood)")
grid (NULL,NULL, lty = 6, col = "cornsilk2")
plot(trace, what = "MixtureProbability") #right now, will be straight line (mix =1)
plot(trace, what = "Mphi")
plot(trace, what = "Sphi")
plot(trace, what = "ExpectedPhi")
loglik.trace <- mcmc$getLogLikelihoodTrace()
acf(loglik.trace)
acf(loglik.trace[start:length(loglik.trace)])
dev.off()
pdf("test2.pdf", width = 11, height = 20)
#plot(trace, what = "Expression", geneIndex = 905) #used to make sure gene stabalized, not really needed now
plot(trace, what = "Alpha", mixture = 1)
plot(trace, what = "LambdaPrime", mixture = 1)
dev.off()
rm(list=ls())
library(ribModel)
rm(list=ls())
#read genome
with.phi <- FALSE
if (with.phi) {
genome <- initializeGenomeObject(file = "../data/twoMixtures/simulatedAllUniqueR.fasta", expression.file = "../data/twoMixtures/simulatedAllUniqueR_phi.csv")
} else {
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
}
#initialize parameter object
sphi_init <- (c(1,1,1))
numMixtures <- 3
mixDef <- "allUnique"
geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457), rep(1, 3403), rep(3, 500))
#geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457))
#geneAssignment <- c(rep(1,448), rep(2,457))
#geneAssignment <- c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
#parameter <- initializeParameterObject(model="ROC", restart.file="50restartFile.rst")
# initialize MCMC object
samples <- 30
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "ROC", with.phi)
setRestartSettings(mcmc, "restartFile.rst", adaptiveWidth, TRUE)
#run mcmc on genome with parameter using model
system.time(
runMCMC(mcmc, genome, model, 8)
)
trace <- parameter$getTraceObject()
writeParameterObject(parameter, file="ROCParameter1.Rdat")
writeMCMCObject(mcmc, file="MCMCObject1.Rdat")
plot(mcmc)
plot(trace, what = "MixtureProbability")
plot(trace, what = "SPhi")
plot(trace, what = "ExpectedPhi")
plot(trace, what = "SPhi")
plot(trace, what = "ExpectedPhi")
plot(trace, what = "MixtureProbability")
plot(trace, what = "SPhi")
plot(trace, what = "Sphi")
parameter <- loadParameterObject(c("RFPObject1.Rdat", "ROCObject1.Rdat"))
parameter <- loadParameterObject(c("RFPObject1.Rdat", "ROCParameter1.Rdat"))
library(ribModel)
rm(list=ls())
#read genome
genome.file <- "../data/FONSE/genome_2000.fasta"
phi.file <- "../data/realGenomes/Scereviciae.phi.csv"
mut.file <- "../data/realGenomes/Scereviciae.mut.csv"
sel.file <- "../data/realGenomes/Scereviciae.sel.csv"
from.good.values <- FALSE
genome <- initializeGenomeObject(genome.file)
sphi_init <- 1
numMixtures <- 1
mixDef <- "allUnique"
#geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457), rep(1, 3903))
#geneAssignment <- c(rep(1,448), rep(1,513), rep(2,457))
#geneAssignment <- c(rep(1,448), rep(2,457))
#geneAssignment <- c(rep(1,500), rep(2,500))
geneAssignment <- rep(1,length(genome))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, model="FONSE", split.serine = TRUE,
mixture.definition = mixDef)
#parameter <- initializeParameterObject(model="FONSE", restart.file="10restartFile.rst")
# initialize MCMC object
samples <- 10
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "FONSE")
if(from.good.values) {
phi <- read.table(phi.file, header = T, sep = ",")
phi.values <- phi[,2]
parameter$initializeSynthesisRateByList(phi.values)
}
setRestartSettings(mcmc, "restartFile.rst", 10, TRUE)
#run mcmc on genome with parameter using model
system.time(
runMCMC(mcmc, genome, model, 16)
)
writeParameterObject(parameter, file="FONSEObject1.Rdat")
files <- c("FONSEObject1.Rdat")
rm(list=ls())
files <- c("FONSEObject1.Rdat")
firstModel <- "Invalid model"
for (i in 1:length(files)){
tempEnv <- new.env();
load(file = files[i], envir = tempEnv)
if (i == 1){
firstModel <- tempEnv$model
}else{
if (firstModel != tempEnv$model){
stop("The models do not match between files")
}#end of error check
}#end of if-else
}#end of for
parameter <- new(FONSEParameter)
rm(list=ls())
library(ribModel)
parameter <- loadParameterObject(c("FONSEObject1.Rdat"))
trace <- parameter$getTraceObject()
plot(trace, what = "MixtureProbability")
plot(trace, what = "SPhi")
plot(trace, what = "ExpectedPhi")
plot(trace, what = "Mutation", mixture = mixture)
