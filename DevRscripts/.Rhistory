}
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
library(ribModel)
library(MCMCpack)
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/sqrt(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/sqrt(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/sqrt(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/sqrt(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/sqrt(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = rate)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=scale)))
abline(v=1/(randGamma(shape, rate)), col="red")
}
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = rate)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=scale)))
abline(v=1/(randGamma(shape, rate)), col="red")
}
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = rate)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=scale)))
abline(v=1/(randGamma(shape, rate)), col="red")
}
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = rate)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=scale)))
abline(v=1/(randGamma(shape, rate)), col="red")
}
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = rate)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=scale)))
abline(v=1/(randGamma(shape, rate)), col="red")
}
#InvG scale = scale
#G scale = rate, 1/()
#result - better
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
#InvG scale = scale
#G scale = rate, 1/()
#result - better
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
#InvG scale = scale
#G scale = rate, 1/()
#result - better
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
#InvG scale = scale
#G scale = rate, 1/()
#result - better
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
#InvG scale = scale
#G scale = rate, 1/()
#result - better
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
#InvG scale = scale
#G scale = rate, 1/()
#result - better
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
#InvG scale = scale
#G scale = rate, 1/()
#result - better
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
#InvG scale = scale
#G scale = rate, 1/()
#result - better
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
#InvG scale = scale
#G scale = rate, 1/()
#result - better
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
rm(list=ls())
library(ribModel)
with.phi <- TRUE
if (with.phi) {
genome <- initializeGenomeObject(file = "../data/singleMixture/simulatedOneMix.fasta", expression.file = "../data/singleMixture/simulatedOneMix_simphi.csv")
} else {
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
}
sphi_init <- (c(1))
numMixtures <- 1
mixDef <- "allUnique"
geneAssignment <- c(rep(1,genome$getGenomeSize()))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
sphi_init <- (c(1))
numMixtures <- 1
mixDef <- "allUnique"
geneAssignment <- c(rep(1,genome$getGenomeSize()))
geneAssignment <- c(rep(1, genome$getGenomeSize()))
genome$getGenomeSize()
genome$getGenomeSize()
genome <- initializeGenomeObject(file = "../data/singleMixture/simulatedOneMix.fasta", expression.file = "../data/singleMixture/simulatedOneMix_simphi.csv")
genome$getGenomeSize()
genome$getGenomeSize()
rm(list=ls())
library(ribModel)
rm(list=ls())
#read genome
with.phi <- FALSE
if (with.phi) {
genome <- initializeGenomeObject(file = "../data/twoMixtures/simulatedAllUniqueR.fasta", expression.file = "../data/twoMixtures/simulatedAllUniqueR_phi.csv")
} else {
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
}
genome$getGenomeSize()
library(ribModel)
rm(list=ls())
#read genome
with.phi <- FALSE
if (with.phi) {
genome <- initializeGenomeObject(file = "../data/twoMixtures/simulatedAllUniqueR.fasta", expression.file = "../data/twoMixtures/simulatedAllUniqueR_phi.csv")
} else {
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
}
genome$getGenomeSize()
genome$getGenomeSize()
genome$getGenomeSize(false)
genome$getGenomeSize(FALSE)
rm(list=ls())
library(ribModel)
with.phi <- TRUE
if (with.phi) {
genome <- initializeGenomeObject(file = "../data/singleMixture/simulatedOneMix.fasta", expression.file = "../data/singleMixture/simulatedOneMix_simphi.csv")
} else {
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
}
sphi_init <- (c(1))
numMixtures <- 1
mixDef <- "allUnique"
geneAssignment <- c(rep(1, genome$getGenomeSize(FALSE)))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
samples <- 10
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "ROC", with.phi)
setRestartSettings(mcmc, "restartFile.rst", adaptiveWidth, TRUE)
#run mcmc on genome with parameter using model
system.time(
runMCMC(mcmc, genome, model, 8)
)
sphi_init <- (c(1))
numMixtures <- 1
mixDef <- "allUnique"
geneAssignment <- c(rep(1, genome$getGenomeSize(FALSE)))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
#parameter <- initializeParameterObject(model="ROC", restart.file="10restartFile.rst")
# initialize MCMC object
samples <- 10000
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "ROC", with.phi)
setRestartSettings(mcmc, "restartFile.rst", adaptiveWidth, TRUE)
#run mcmc on genome with parameter using model
system.time(
runMCMC(mcmc, genome, model, 8)
)
library(ribModel)
library(MCMCpack)
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/sqrt(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/sqrt(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/sqrt(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/sqrt(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = rate)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=scale)))
abline(v=1/(randGamma(shape, rate)), col="red")
}
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = rate)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=scale)))
abline(v=1/(randGamma(shape, rate)), col="red")
}
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = rate)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=scale)))
abline(v=1/(randGamma(shape, rate)), col="red")
}
shape=6
scale=5
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = rate)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=scale)))
abline(v=1/(randGamma(shape, rate)), col="red")
}
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/sqrt(randGamma(shape, 1/rate)), col="red")
}
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/(randGamma(shape, 1/rate)), col="red")
}
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/(randGamma(shape, 1/rate)), col="red")
}
shape=5
scale=4
rate=1/scale
invg <- rinvgamma(n = 1000, shape = shape, scale = scale)
plot(density(invg))
for(i in 1:20){
abline(v=1/(rgamma(1, shape=shape, scale=rate)))
abline(v=1/(randGamma(shape, 1/rate)), col="red")
}
rm(list=ls())
library(ribModel)
with.phi <- TRUE
if (with.phi) {
genome <- initializeGenomeObject(file = "../data/singleMixture/simulatedOneMix.fasta", expression.file = "../data/singleMixture/simulatedOneMix_simphi.csv")
} else {
genome <- initializeGenomeObject(file = "../data/realGenomes/Skluyveri.fasta")
}
sphi_init <- (c(1))
numMixtures <- 1
mixDef <- "allUnique"
geneAssignment <- c(rep(1, genome$getGenomeSize(FALSE)))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
#parameter <- initializeParameterObject(model="ROC", restart.file="10restartFile.rst")
# initialize MCMC object
samples <- 10000
thining <- 10
adaptiveWidth <- 10
mcmc <- initializeMCMCObject(samples=samples, thining=thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
# get model object
model <- initializeModelObject(parameter, "ROC", with.phi)
setRestartSettings(mcmc, "restartFile.rst", adaptiveWidth, TRUE)
#run mcmc on genome with parameter using model
system.time(
runMCMC(mcmc, genome, model, 8)
)
writeParameterObject(parameter, file="InvGTest_Param.Rdat")
writeMCMCObject(mcmc, file="InvGTest_MCMC.Rdat")
